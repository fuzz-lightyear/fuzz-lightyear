const fs = require('fs')
const p = require('path')
const crypto = require('crypto')
const { exec } = require('child_process')

const mkdirp = require('mkdirp')
const chalk = require('chalk')
const progress = require('cli-progress')
const simpleGit = require('simple-git')

const { create } = require('../..')
const consts = require('../../consts')

exports.command = 'fix'
exports.desc = 'Move previously-failing, tracked test cases into the fixed directory'
exports.builder = {
  module: {
    default: p.join(process.cwd(), 'fuzzing.js'),
    alias: 'm',
    description: 'Path to the module to fuzz',
    type: 'string'
  }
}
exports.handler = async function (argv) {
  var git = simpleGit(moduleDir)

  var moduleDir = p.dirname(argv.module)
  var failingTestRoot = p.join(moduleDir, 'test', 'autogenerated','failing')
  var fixedTestRoot = p.join(moduleDir, 'test', 'autogenerated', 'fixed')

  var failing = []
  var fixed = []

  await new Promise((resolve, reject) => {
    process.env['FUZZ_DISABLE_TEST'] = true

    exec(['git', 'ls-tree', 'HEAD', '--name-only', failingTestRoot + '/*.js'].join(' '), async (err, failingTests) => {
      if (err) return reject(err)
      failingTests = failingTests.split('\n')
      for (const failingTest of failingTests) {
        if (!failingTest) continue
        const testPath = p.basename(failingTest)
        const testFullPath = p.join(moduleDir, failingTest)
        try {
          const { runTest } = require(testFullPath)
          await runTest()
        } catch (err) {
          failing.push(testPath)
          continue
        }
        // If the test passed, move it to the fixed directory.
        const fixedPath = p.join(fixedTestRoot, testPath)
        await new Promise((resolve, reject) => {
          git.mv(failingTest, fixedPath, err => {
            if (err) return reject(err)
            fixed.push(testPath)
            return resolve()
          })
        })
      }
      return resolve()
    })
  })

  for (const failingTest of failing) {
    console.log(`Did not move ${failingTest}, as it is still failing.`)
  }
  for (const fixedTest of fixed) {
    console.log(`Moved ${fixedTest} from failing to fixed.`)
  }
}

